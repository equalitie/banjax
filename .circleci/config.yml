version: 2
jobs:
  build:
    working_directory: ~/equalitie/banjax
    parallelism: 1
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      ATS_VERSION: "7.1.8"
      ATS_SHA512: "1064a67fe4212868445a92fab7f5b2c330b561421de181c9798b7342d7b93d022376831169e212a86f2b3d32c3437ac8338e51a4c8abc8b31049ea9310f82798"
      ATS_DLINK: "http://archive.apache.org/dist/trafficserver/trafficserver-7.1.8.tar.bz2"  # XXX ATS_VERSION duplicated here. did not understand the above link about interpolating...
      TSPATH: "/usr/local/trafficserver"
      TSUSER: "trafserv"
      TSGROUP: "trafserv"
      TSUID: "99"
      TSGID: "99"
      BANJAX_DIR: "/root/equalitie/banjax"
    docker:
      - image: debian:stretch
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS

    - run: |
        echo "deb http://deb.debian.org/debian stretch-backports main" >> /etc/apt/sources.list
        apt-get update -qq
        apt-get upgrade -qq

    - run: |
        apt-get install -qy \
            apt-transport-https \
            sudo \
            curl \
            rsync \
            psmisc \
            python3 \
            python2.7 \
            tzdata \
            unzip \
            zip \
            bzip2 \
            gawk \
            git-core \
            build-essential \
            automake \
            autoconf \
            libtool \
            flex \
            bison \
            cmake \
            libssl-dev \
            libhwloc-dev \
            libcap-dev \
            tcl-dev \
            libpcre3-dev \
            libncurses5-dev \
            libcurl4-openssl-dev \
            libyaml-cpp-dev \
            libyaml-cpp0.5v5 \
            libre2-dev \
            libzmq3-dev \
            libboost-dev \
            libboost-system-dev \
            libboost-test-dev \
            libconfig++-dev \
            nlohmann-json-dev
        apt-get install -qy librdkafka++1 librdkafka-dev


    - run: |
        groupadd --gid $TSGID $TSGROUP
        useradd --uid $TSUID -s /bin/bash -g $TSGROUP -c "Apache Traffic Server" -M $TSUSER

    - run: |
        mkdir /build_trafficserver
        cd /build_trafficserver && curl -O $ATS_DLINK

    # XXX ATS_VERSION duplicated here
    - run: |
        cd /build_trafficserver
        [[ "$(sha512sum < trafficserver-${ATS_VERSION}.tar.bz2)" == "$ATS_SHA512  -" ]]
        tar jxf trafficserver-$ATS_VERSION.tar.bz2

    - run: |
        cd /build_trafficserver/trafficserver-$ATS_VERSION
        ./configure --prefix=$TSPATH \
            --enable-layout=Apache \
            --with-user=$TSUSER \
            --with-group=$TSGROUP \
            --enable-experimental-plugins \
            --enable-example-plugins \
            --with-ncurses \
            --enable-wccp

    - run: |
        cd /build_trafficserver/trafficserver-$ATS_VERSION
        make -j4  # nproc says like 36 but i don't think we can actually use them all
        mkdir -p /usr/local/include/ts
        cp ./proxy/api/ts/* /usr/local/include/ts/  # omg why doesn't make install do this
        cp ./lib/ts/*.h /usr/local/include/ts/
        make install

    - run: |
        mkdir -m 0755 $TSPATH/conf/conf.d
        mkdir -m 0755 $TSPATH/conf/banjax
        mkdir -m 0755 $TSPATH/conf/banjax/banjax.d
        mkdir -m 0755 $TSPATH/conf/snapshots
        mkdir -m 0755 $TSPATH/modules/banjax
        mkdir -m 0750 $TSPATH/conf/ssl
        touch "$TSPATH"/conf/icp.config  # for some reason ATS complained if this didn't exist...

    - run: |
        cd "$BANJAX_DIR"
        mkdir build && cd build
        cmake ../ -DCMAKE_CXX_FLAGS="-I$TSPATH/include"
        mkdir /usr/local/include/nlohmann  # XXX terrible
        cp -r json-prefix/include/nlohmann/* /usr/local/include/nlohmann/
        make -j4

    - run: |
        cd "$BANJAX_DIR"
        cp build/banjax.so $TSPATH/modules/banjax/banjax.so
        cd config
        cp auth.html captcha.html solver.html $TSPATH/modules/banjax/

    - run: |
        echo "banjax/banjax.so $TSPATH/modules/banjax/" >> "$TSPATH"/conf/plugin.config
        echo "regex_map http://^127.0.0.1:8080$/ http://127.0.0.1:8000/" >> "$TSPATH"/conf/remap.config
        perl -pi -e 's/CONFIG proxy.config.http.cache.required_headers INT .+/CONFIG proxy.config.http.cache.required_headers INT 0/g' "$TSPATH"/conf/records.config

    - run: cd "$TSPATH" && ./bin/trafficserver restart
    - run: cd "$BANJAX_DIR" && ./build/unit-tests  --log_level=test_suite  # XXX not sure if these are working
    - run: cd "$BANJAX_DIR" && python2.7 ./test/banjax_behavior_test.py --ts-prefix=$TSPATH --ts-layout="apache"

